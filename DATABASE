#include <fstream>
#include <iostream>
#include <string>
#include <ctime>

struct dob {      
	int  Y;
	int  M;
	int  D;
};
struct INF {      
	int number;
	char surname[32];
	char name[16];
	char pn[32];
	char email[32];
	dob dofb;
};
struct DB {       
	DB* next;
	INF list;
};
struct List {     
	DB* first, *last;
};                                            
struct TIME {
	int tm_mday;  // day of month from 1 to 31
	int tm_mon;   // month of year from 0 to 11
	int tm_year;  // year since 1900
};

void createDB(List& l) {
	l.first = l.last = nullptr;
} 
void addmember(List& l,const INF& x,int& count) {
	DB* tmp = new DB;
	tmp->list = x;
	tmp->next = nullptr;
	if (l.first == nullptr) {
		l.first = l.last = tmp;
	}
	else {
		l.last->next = tmp;
		l.last = tmp;
	}
	++count;
}
void Delete(List& l,int& count) {
	std::cout << "Surname: ";
	char tmp[32];
	std::cin >> tmp; std::cin.ignore();
	DB* now = l.first;
	int i = 0;
	while (now->next != nullptr) {
		if (strcmp(tmp, now->next->list.surname) == 0) {
			now->next = now->next->next;
			--count;
			return;
		}
		else {
			now = now->next;
		}
	}
	if (strcmp(tmp, now->list.surname) == 0) {
		delete now;
		createDB(l);
		return;
	}
	std::cout << "There is no : " << tmp << std::endl;
}
void deleteDB(List& l) {
	DB* tmp;
	while (l.first) {
		tmp = l.first;
		l.first = l.first->next;
		delete tmp;
	}
	l.first = l.last = nullptr;
}

std::ostream& operator << (std::ostream& out, const INF& X) {
		out << X.number << ". " << X.surname << " " << X.name << "  +" << X.pn << " " << X.email << " " << X.dofb.Y << "." << X.dofb.M << "." << X.dofb.D;
	return out;
}
std::ostream& operator << (std::ostream& out, const TIME& X) {
	out << X.tm_year << "." << X.tm_mon << "." << X.tm_mday;
	return out;
}
std::istream& operator >> (std::istream& in, INF& X) {
	std::cout << "Student number: ";
	in >> X.number; in.ignore();
	std::cout << "Surname: ";
	in.getline(X.surname, 32);
	std::cout << "Name: ";
	in.getline(X.name, 16);;
	std::cout << "Enter Phone Number(without '+'): ";
	in >> X.pn; in.ignore();
	std::cout << "Enter Email: ";
	in.getline(X.email, 32);
	std::cout << "******Enter date of birthday******"<<std::endl;
	std::cout << "Year : ";
	in >> X.dofb.Y; in.ignore();
	std::cout << "Month : ";
	in >> X.dofb.M; in.ignore();
	std::cout << "Day: ";
	in >> X.dofb.D; in.ignore();
	std::cout << "Complete";
	std::cout << std::endl;
	return in;
}
std::ostream& operator << (std::ostream& out, const List& L) {
	DB* now = L.first;
	while (now) { // while (now!=nullptr)
		out << now->list << std::endl;
		now = now->next;
	}
	return out;
}
bool operator <(const DB& X, const DB& Y) {
	int res = strcmp(X.list.surname, Y.list.surname);
	if (res < 0)
		return true;
	if (res == 0) {
		if (strcmp(X.list.name, Y.list.name) < 0)
			return true;
	}
	return false;
}

bool srav(const DB& X, const DB& Y, const TIME& l) {

	int a, k, N = 0, b = 0, c = 0;
	for (int i = 1; i < 12; ++i) {
		if (i == 2 && l.tm_year % 4 == 0) {
			if(i < l.tm_mon)N += 29;
			if(i < X.list.dofb.M)b += 29;
			if (i < Y.list.dofb.M)c += 29;
		}
		else if (i == 2) {
			if (i < l.tm_mon)N += 28;
			if (i < X.list.dofb.M)b += 28;
			if (i < Y.list.dofb.M)c += 28;
		}
		else if (i < 9 && (i % 2 == 1 || i == 8)) {
			if (i < l.tm_mon)N += 31;
			if (i < X.list.dofb.M)b += 31;
			if (i < Y.list.dofb.M)c += 31;
		}
		else if (i >= 9 && i % 2 == 1) {
			if (i < l.tm_mon)N += 30;
			if (i < X.list.dofb.M)b += 30;
			if (i < Y.list.dofb.M)c += 30;
		}
		else {
			if (i < l.tm_mon)N += 31;
			if (i < X.list.dofb.M)b += 31;
			if (i < Y.list.dofb.M)c += 31;
		}
	}
	N += l.tm_mday;
	b += X.list.dofb.D;
	c += Y.list.dofb.D;
	if (N < b) {
		a = N - b;
	}
	else if (l.tm_year + 1 % 4 == 0) {
		a = 366 - N + b;
	}
	else {
		a = 365 - N + b;
	}
	if (N < c) {
		k = N - c;
	}
	else if (l.tm_year + 1 % 4 == 0) {
		k = 366 - N + c;
	}
	else {
		k = 365 - N + c;
	}
	return  a < k;
}

void FindbyPN(const List& l) {
	std::cout << "Phone number(without '+'): ";
	std::string tmp;
	std::cin >> tmp; std::cin.ignore();
	DB* now = l.first;
	while (now) {
		if(tmp==now->list.pn){
			std::cout << now->list << std::endl;
			return;
		}
		else {
			now = now->next;
		}
	}
	std::cout << "There is no : " << tmp << std:: endl;
}
void FindbySN(const List& l) {
	std::cout << "Surname: ";
	char tmp[32];
	std::cin >> tmp;
	DB* now = l.first;
	while (now) {
		if (strcmp(tmp, now->list.surname) == 0) {
			std::cout << now->list << std::endl;
			return;
		}
		else {
			now = now->next;
		}
	}
	std::cout << "There is no : " << tmp << std::endl;
}

void saveDB( List& DB1,int count) {
	char fname[256];
	std::cout << "Database file name [students.db]: " << std::endl;
	std::cin.getline(fname, 256);
	if (strlen(fname) < 1)
		strcpy_s(fname, "students.db");

	std::ofstream outFile;
	outFile.open(fname, std::ios_base::binary);
	if (!outFile) {
		std::cout << "Can not open file " << fname << std::endl;
		return;
	}
	int count1 = count;
		DB* tmp = DB1.first;
	while(count1--) {
		outFile.write((char*)&(tmp->list), sizeof(INF));
		tmp = tmp->next;
	};
	outFile.close();
}
void openDBfile(List& l,int &count) {
	char fname[256];
	std::cout << "Database file name [students.db]: ";
	std::cin.getline(fname, 256);
	if (strlen(fname) < 1)
		strcpy_s(fname, "students.db");
	std::ifstream inFile;
	inFile.open(fname, std::ios_base::binary);
	if (!inFile) {
		std::cout << "Can not open file " << fname << std::endl;
		return;
	}
	deleteDB(l);
	count = 0;
	INF tmp;
	while (inFile.peek() != EOF) {
		inFile.read((char*)&tmp, sizeof(tmp));
		addmember(l, tmp, count);
	}
	inFile.close();
	std::cout << "Database " << fname << " is opened. Total " << count << " records." << std::endl;
}

void sortBySurname(List &L) {
	bool isSorted = true;
	DB* now, * prev;
	do {
		isSorted = true;
		prev = nullptr;
		now = L.first;
		while (now->next) {
			if (now->next < now) {
				if (prev != nullptr) {
					prev->next = now->next;
					now->next = now->next->next;
					prev->next->next = now;
					prev = prev->next;
				}
				else {
					L.first = now->next;
					now->next = now->next->next;
					L.first->next = now;

					prev = L.first;
				}
				isSorted = false;
			}
			else {
				prev = now;
				now = now->next;
			}
		}
	} while (!isSorted);
	// Восстановить L.last!!!!
	now = L.first;
	while (now->next) {
		now = now->next;
	}
	L.last = now;
}
void SortbyDoB(List &L) {
	bool isSorted = true;
	DB* now, * prev;
	do {
		isSorted = true;
		prev = nullptr;
		now = L.first;

		while (now->next) {

			bool s1 =  now->next->list.dofb.Y < now->list.dofb.Y;
			bool s2 =  now->next->list.dofb.M < now->list.dofb.M ;
			bool s3 =  now->next->list.dofb.D < now->list.dofb.D;

			if (s1 || (!s1 && s2) || (!s1 && !s2 && s3)) {
				if (prev != nullptr) {
					prev->next = now->next;
					now->next = now->next->next;
					prev->next->next = now;
					prev = prev->next;
				}
				else {
					L.first = now->next;
					now->next = now->next->next;
					L.first->next = now;

					prev = L.first;
				}
				isSorted = false;
			}
			else {
				prev = now;
				now = now->next;
			}
		}
	} while (!isSorted);
	// Восстановить L.last!!!!
	now = L.first;
	while (now->next) {
		now = now->next;
	}
	L.last = now;
}
void SortbyDtB(List &L,const TIME &l){
	bool isSorted = true;
	DB* now, * prev;
	do {
		isSorted = true;
		prev = nullptr;
		now = L.first;
		while (now->next) {

			if (srav(*now->next ,* now, l)) {
				if (prev != nullptr) {
					prev->next = now->next;
					now->next = now->next->next;
					prev->next->next = now;
					prev = prev->next;
				}
				else {
					L.first = now->next;
					now->next = now->next->next;
					L.first->next = now;

					prev = L.first;
				}
				isSorted = false;
			}
			else {
				prev = now;
				now = now->next;
			}
		}
	} while (!isSorted);
	// Восстановить L.last!!!!
	now = L.first;
	while (now->next) {
		now = now->next;
	}
	L.last = now;
}

TIME Time() {
	TIME nowT;
	std::cout << "Write in today's day of the month(from 1 to 31) : ";
	std::cin >> nowT.tm_mday;
	std::cout << "Input the current month(from 1 to 12) : ";
	std::cin >> nowT.tm_mon;
	std::cout << "Input the current year(since 1900) : ";
	std::cin >> nowT.tm_year;
	std::cout << std::endl;
	return nowT;
}

int menu(TIME l) {
	std::cout << "Today is " << l << std::endl;
	for (int i = 0; i < 21; ++i)std::cout << '*';
	std::cout << std::endl;
	std::cout << "1:Add person" << std::endl;
	std::cout << "2:Delete person(by surname)" << std::endl;
	std::cout << "3:Show list" << std::endl;
	std::cout << "4:Sert list" << std::endl;
	std::cout << "5:Save list in file" << std::endl;
	std::cout << "6:Find person" << std::endl;
	std::cout << "7:Open DB" << std::endl;
	std::cout << "0:Exit" << std::endl;
	int t;
	std::cin >> t;
	return t;
}
int findmenu() {
	for (int i = 0; i < 21; ++i)std::cout << '*';
	std::cout << std::endl;
	std::cout << "1. Find by Phone number" << std::endl;
	std::cout << "2. Find by Surname" << std::endl;
	int t;
	std::cin >> t;
	return t;
}
int sertmenu() {
	for (int i = 0; i < 21; ++i)std::cout << '*';
	std::cout << std::endl;
	std::cout << "Sert by: " << std::endl;
	std::cout << "1.Surname " << std::endl;
	std::cout << "2.Date of birthday " << std::endl;
	std::cout << "3.Day to birthday " << std::endl;
	int t;
	std::cin >> t;
	return t;
}

int main()
{
	List group;
	createDB(group);
	int action;
	INF tmp;
	int count = 0;
	TIME time = Time();
	do {
		
		action = menu(time);
		switch (action) {
		case 1: {
			std::cin >> tmp;
			addmember(group, tmp,count);
			std::cout << tmp << std::endl;
			break;
		};
		case 2: {
			Delete(group,count);
			break;
		}
		case 3: {
			std::cout << group << std::endl;
			break;
		}
		case 4: {
			int y = sertmenu();
			switch (y) {
			case 1: {
				sortBySurname(group);
				break;
			}
			case 2: {
				SortbyDoB(group);
				break;
			}
			case 3: {
				SortbyDtB(group, time);
				break;
			}
			}
			break;
		}
		case 5: {
			saveDB(group,count);
              break;
		}
		case 6: {
			int k;
			k = findmenu();
			switch (k) {
			case 1: {
				FindbyPN(group);
				break;
			}
			case 2: {
				FindbySN(group);
				break;
			}
			}
			break;
		}
		case 7: {
			openDBfile(group,count);
		}
		
		}

	} while (action != 0);
 }
